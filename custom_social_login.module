<?php

/**
 * @file
 * Contains custom_social_login.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\custom_social_login\HybridauthInstance;

/**
 * Implements hook_help().
 */
function custom_social_login_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the custom_social_login module.
    case 'help.page.custom_social_login':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom module that handle login using Hybridauth.') . '</p>';
      return $output;

    default:
  }
}

function custom_social_login_theme() {
  $theme['login'] = [
    'variables' => [
      'login_form' => NULL, 
      'create_account' => NULL, 
      'update_display_name_and_email' => NULL,
      'domain' => NULL,
    ],
    'template' => 'login',
  ];
  return $theme;
}

/**
 * Implements hook_schema().
 */
function custom_social_login_schema() {
  $schema = array();

  $schema['hybridauth_identity'] = array(
    'description' => 'Holds identities from HybridAuth library.',
    'fields' => array(
      'id' => array(
        'description' => 'Unique ID of HybridAuth identity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this HybridAuth identity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'provider' => array(
        'description' => 'The authentication provider for this HybridAuth identity.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'provider_identifier' => array(
        'description' => 'The authentication provider UID for this HybridAuth identity.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A serialized array containing information from HybridAuth library.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'normal',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'unique keys' => array(
      'provider_provider_identifier' => array('provider', 'provider_identifier'),
    ),
    'foreign keys' => array(
      'hybridauth_identity_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['hybridauth_session'] = array(
    'description' => 'Holds sessions data from HybridAuth library.',
    'fields' => array(
      'uid' => array(
        'description' => 'The {users}.uid that owns this HybridAuth session data.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'A serialized array containing session data from HybridAuth library.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the session was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'hybridauth_session_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('uid'),
  );

  return $schema;
}

function custom_social_login_hybridauth_identity_load($data) {
	$db = \Drupal::database();
  $result = $db->select('hybridauth_identity', 'ha_id')
    ->fields('ha_id')
    ->condition('provider', $data['provider'], '=')
    ->condition('provider_identifier', custom_social_login_hybridauth_provider_identifier($data['identifier']), '=')
    ->execute()
    ->fetchAssoc();
  return $result;
}


function custom_social_login_hybridauth_identity_save($data, $uid = NULL) {
  $user = \Drupal::currentUser();
  $uid = $uid ? $uid : $user->id();
  $db = \Drupal::database();
  $db->merge('hybridauth_identity')
    ->key(array('uid' => $uid, 'provider' => $data['provider'], 'provider_identifier' => custom_social_login_hybridauth_provider_identifier($data['identifier'])))
    ->fields(array('data' => serialize($data)))
    ->execute();
}

function custom_social_login_hybridauth_provider_identifier($identifier) {
  $provider_identifier = (strlen($identifier) > 32) ? md5($identifier . HYBRIDAUTH_HASH_SALT) : $identifier;
  return $provider_identifier;
}

function custome_social_login_hybridauth_user_is_blocked_by_uid($uid) {
	$db = \Drupal::database();
  return $db->select('users_field_data')
    ->fields('users_field_data', array('name'))
    ->condition('uid', $uid)
    ->condition('status', 0)
    ->execute()->fetchObject();
}

function custom_social_login_hybridauth_user_login_access_by_uid($uid) {
	$db = \Drupal::database();
  $result = $db->select('users_field_data')
    ->fields('users_field_data', array('login'))
    ->condition('uid', $uid)
    ->execute()->fetchObject();
  // Dries birthday timestamp, Nov 19, 1978 = 280281600 :).
  return !($result->login == 280281600);
}

function custom_social_login_hybridauth_make_username($data, $allow_empty = FALSE) {
  // $data['username'] contains user entered username, we should use it if
  // available.
  if (empty($data['username'])) {
    // $pattern = '[user:hybridauth:firstName] [user:hybridauth:lastName]';
    // $account = new stdClass();
    // $account->data = array('hybridauth' => $data);

    // $hybridauth_name = $desired_name = trim(token_replace($pattern, array('user' => $account), array('clear' => TRUE, 'sanitize' => FALSE)));
    $hybridauth_name = $desired_name = trim($data['firstName'] . ' ' . $data['lastName']);
  }
  else {
    $hybridauth_name = $desired_name = trim($data['username']);
  }

  // Check for empty username and use default one if empty is not allowed.
  if (empty($hybridauth_name) && !$allow_empty) {
    $hybridauth_name = $desired_name = $data['email'];
  }

  if (!empty($hybridauth_name)) {
    $counter = 0;
    while (user_load_by_name($hybridauth_name)) {
      $counter++;
      $hybridauth_name = $desired_name . ' ' . $counter;
    }
  }
  $name = $hybridauth_name;

  // Check that the altered username is unique.
  if (!empty($name) && !user_load_by_name($name)) {
    return $name;
  }

  return $hybridauth_name;
}

/**
 * Initialize the user session before using the HybridAuth library.
 */
function custom_social_login_hybridauth_session_start() {
  $session = \Drupal::service('session');
  // Make sure that a user session exists.
  if(!$session->isStarted()) {
    $session->start();
  }
  // Special handling for HTTPS with normal session IDs and secure session IDs.
  // Duplicated sessions are created, so we need to pull out the correct session
  // data.
  if (Drupal::request()->isSecure()) {
  	$db = \Drupal::database();
    // NEED TO CIRCLE BACK TO USE CORRECT COLUMN FROM DATABASE
    $session = $db->query('SELECT session FROM {sessions} WHERE sid = :sid', array('sid' => session_id()))->fetchField();
    if ($session) {
      // Overwrite $_SESSION with the data.
      session_decode($session);
      // Remove the duplicate session from the database.
      $db->delete('sessions')->condition('sid', session_id())->execute();
    }
  }
}

function custom_social_login_hybridauth_session_load_by_uid($uid) {
  $result = db_select('hybridauth_session', 'ha_sess')
    ->fields('ha_sess')
    ->condition('uid', $uid, '=')
    ->execute()
    ->fetchAssoc();
  return $result;
}

function custom_social_login_hybridauth_get_instance() {
	
}
/**
 * Implements hook_user_login().
 */
function custom_social_login_user_login($account) {
  if ($hybridauth_session_data = custom_social_login_hybridauth_session_load_by_uid($account->id())) {
    if ($hybridauth = HybridauthInstance::getHybridauthInstance()) {
      if (is_object($hybridauth)) {
        $hybridauth_session_data = $hybridauth_session_data['data'];
        $hybridauth_session_data_current = unserialize($hybridauth->getSessionData());
        if (is_array($hybridauth_session_data_current)) {
          $hybridauth_session_data = serialize(array_merge(unserialize($hybridauth_session_data), $hybridauth_session_data_current));
        }
        // Call Hybrid_Auth::restoreSessionData() to set stored data.
        $hybridauth->restoreSessionData($hybridauth_session_data);
        custom_social_login_hybridauth_session_save($hybridauth_session_data, $account->id());
      }
    }
  }
}

/**
 * Implements hook_user_logout().
 */
function custom_social_login_user_logout($account) {
  // Try to get HybridAuth instance.
  if ($hybridauth = HybridauthInstance::getHybridauthInstance()) {
    if (is_object($hybridauth)) {
      // Call Hybrid_Auth::getSessionData() to get stored data.
      if ($hybridauth_session_data = $hybridauth->getSessionData()) {
        custom_social_login_hybridauth_session_save($hybridauth_session_data, $account->id());
      }
    }
  }
}

function custom_social_login_hybridauth_session_save($data, $uid = NULL) {
  $user = \Drupal::currentUser();
  $uid = $uid ? $uid : $user->id();
  $db = \Drupal::database();
  $db->merge('hybridauth_session')
    ->key(array('uid' => $uid))
    ->fields(array('data' => $data, 'updated' => REQUEST_TIME))
    ->execute();
}


/**
 * Implements hook_user_delete().
 */
function custom_social_login_user_delete($account) {
  custom_social_login_hybridauth_identity_delete_by_uid($account->id());
  custom_social_login_hybridauth_session_delete_by_uid($account->id());
}


function custom_social_login_hybridauth_identity_delete_by_uid($uid) {
  $db = \Drupal::database();
  $result = $db->delete('hybridauth_identity')
    ->condition('uid', $uid, '=')
    ->execute();
  return $result;
}

function custom_social_login_hybridauth_session_delete_by_uid($uid) {
  $db = \Drupal::database();
  $result = $db->delete('hybridauth_session')
    ->condition('uid', $uid, '=')
    ->execute();
  return $result;
}